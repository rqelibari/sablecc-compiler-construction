/*
 *  Copyright 2016 Rezart Qelibari <qelibarr@informatik.uni-freiburg.de>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

Package minijava ;

Helpers
	all = [0..0xffff];

	/* invisible characters */
    tab = 9;
    cr = 13;
    lf = 10;
    eol = cr lf | cr | lf; // This takes care of different platforms

    /* Comments and non code */
	input_character = [all - [cr + lf]];  // Allow any character in comments etc.
	not_star =    [input_character - '*'] | eol;
	not_star_not_slash = [input_character - ['*' + '/']] | eol;

	end_of_line_comment = '//' input_character* eol?;
	traditional_comment = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
    docblock_comment = '/**' '*'* (not_star_not_slash not_star* '*'+)* '/';

    /* Meaningful input chars */
	lowercase = ['a'..'z'];
    uppercase = ['A'..'Z'];
    digit = ['0'..'9'];
    letter = lowercase | uppercase ;

    id_mid = letter | digit | '.' | '_' ;
Tokens
	/* Keywords */
    k_class = 'class';
    k_extends = 'extends';
    k_public = 'public';
    k_new = 'new';

    /* main method and other methods */
    k_static = 'static';
    k_void = 'void';
    k_main = 'main';
    k_string = 'String';
    k_return = 'return';
    k_length = 'length';

    /* Value keywords */
    k_true = 'true';
    k_false = 'false';
    k_this = 'this';

    /* Type keywords */
    k_int = 'int';
    k_boolean = 'boolean';

    /* statement keywords */
    k_if = 'if';
    k_else = 'else';
    k_while = 'while';
    k_sopl = 'System.out.println';

    /* operators */
    op_and = '&&';
    op_plus = '+';
    op_minus = '-';
    op_mul = '*';
    op_st = '<';

    /* Semicolon, Parenthese, Braces, etc. */
    semicolon = ';';
    l_par = '(';
    r_par = ')';
    l_bkt = '[';
    r_bkt = ']';
    l_brace =  '{';
    r_brace =  '}';
    comma = ',';
    point = '.';
    exclamation = '!';
    eqsign = '=';

    /* Other tokens */
    id = letter id_mid*;
    integer = '0' | ['1'..'9'] digit*;

    /* tokens to ignore */
    blank = (' ' | tab | eol)+;
    comment = end_of_line_comment | traditional_comment | docblock_comment;
Ignored Tokens
	blank,
	comment;

Productions
	program = mainclass classdecl*;
    
    /* classes */
	mainclass = k_class [class_id]:id l_brace [classvars]:vardecl* k_public k_static k_void k_main l_par k_string l_bkt r_bkt [arg]:id r_par [method_l_brace]:l_brace vardecl* statement* [method_r_brace]:r_brace r_brace;
	classdecl = {simple} k_class [class_id]:id l_brace vardecl* methoddecl* r_brace
    			| {extend} k_class [class_id]:id k_extends [parent_class_id]:id l_brace vardecl* methoddecl* r_brace;
    
    /* variables */
    vardecl = type [name]:id semicolon;
    type = {intarray} k_int l_bkt r_bkt
    	   | {int} k_int
           | {bool} k_boolean
           | {newtype} id;

    /* methods */
    methoddecl = k_public type id l_par paramlist? r_par l_brace vardecl* statement* k_return exp semicolon r_brace;
    paramlist = type [first_arg]:id paramrest*;
    paramrest = comma type id;

    /* statements */
    statement = {assign} id eqsign exp semicolon
                | {array_assign} id l_bkt [index]:exp r_bkt eqsign exp semicolon
                | {print} k_sopl l_par exp r_par semicolon
                | {if} k_if l_par exp r_par [success]:statement k_else [else]:statement
                | {while} k_while l_par exp r_par statement
                | {block} l_brace statement* r_brace;

    /* expressions */
    unary_expression = {identifier} id
                       | {integer} integer
                       | {this} k_this
                       | {instantiation} k_new id l_par r_par
                       | {parenthesis} l_par exp r_par
                       | {true} k_true
                       | {false} k_false
                       | {new_int} k_new k_int l_bkt exp r_bkt;

    bracket_expression = {unary} unary_expression
                         | {length} bracket_expression l_bkt [index]:bracket_expression r_bkt;

    call_expression = {bracket} bracket_expression
                      | {length} call_expression point k_length
                      | {call} call_expression point id l_par explist? r_par;

    negate_expression = {call} call_expression
                        | {negate} exclamation negate_expression;

    multiplicative_expression = {negate} negate_expression
                                | {mul} [left]:multiplicative_expression op_mul [right]:negate_expression;

    additive_expression =  {multiplicative} multiplicative_expression
                            | {plus} [left]:additive_expression op_plus [right]:multiplicative_expression
                            | {minus} [left]:additive_expression op_minus [right]:multiplicative_expression;

    and_expr = {additive} additive_expression
               | {and} [left]:and_expr op_and [right]:additive_expression;

    comp_expr = {and} and_expr
               | {comp} [left]:comp_expr op_st [right]:and_expr;

    exp = comp_expr;

    /* expression lists */
    explist = exp exprest*;
    exprest = comma exp;
