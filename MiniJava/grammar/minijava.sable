/* Syntax for Java property files, grossly simplified */
Package minijava ;

Helpers
	all = [0..0xffff];

	/* invisible characters */
    tab = 9;
    cr = 13;
    lf = 10;
    eol = cr lf | cr | lf; // This takes care of different platforms

    /* Comments and non code */
	input_character = [all - [cr + lf]];  // Allow any character in comments etc.
	not_star =    [input_character - '*'] | eol;
	not_star_not_slash = [input_character - ['*' + '/']] | eol;

	end_of_line_comment = '//' input_character* eol?;
	traditional_comment = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
    docblock_comment = '/**' '*'* (not_star_not_slash not_star* '*'+)* '/';

    /* Meaningful input chars */
	lowercase = ['a'..'z'];
    uppercase = ['A'..'Z'];
    digit = ['0'..'9'];
    letter = lowercase | uppercase ;

    id_mid = letter | digit | '.' | '_' ;
Tokens
	/* Keywords */
    k_class = 'class';
    k_extends = 'extends';
    k_public = 'public';
    k_static = 'static';
    k_void = 'void';
    k_main = 'main';
    k_string = 'String';

    /* Type keywords */
    k_int = 'int';
    k_boolean = 'boolean';

    /* Semicolon, Parenthese, Braces, etc. */
    semicolon = ';';
    l_par = '(';
    r_par = ')';
    l_bkt = '[';
    r_bkt = ']';
    l_brace =  '{';
    r_brace =  '}';

    /* Other tokens */
    id = letter id_mid*;

    /* tokens to ignore */
    blank = (' ' | tab | eol)+;
    comment = end_of_line_comment | traditional_comment | docblock_comment;
Ignored Tokens
	blank,
	comment;

Productions
	program = mainclass classdecl*;
    
    /* classes */
	mainclass = k_class [class_id]:id l_brace [classvars]:vardecl* k_public k_static k_void k_main l_par k_string l_bkt r_bkt [arg]:id r_par [method_l_brace]:l_brace vardecl* [method_r_brace]:r_brace r_brace;
	classdecl = {simple} k_class [class_id]:id l_brace vardecl* r_brace
    			| {extend} k_class [class_id]:id k_extends [parent_class_id]:id l_brace vardecl* r_brace;
    
    /* variables */
    vardecl = type [name]:id semicolon;
    type = {intarray} k_int l_bkt r_bkt
    	   | {int} k_int
           | {bool} k_boolean;